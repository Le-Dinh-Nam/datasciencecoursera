submit
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(mean(), c(1.4, 3.6, 7.9, 8.8))
evaluate(mean, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(data){data[1]}, c(8, 4, 0))
evaluate(function(data){data[length(data)]}, c(8, 4, 0))
?paste
paste("programming", "is", "fun!")
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
telegram("wish!")
telegram("wish!")
submit()
submit()
mad_libs(adjective = "", place = "", noun = "")
submit()
submit()
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3)
strptime(t3,"%B %d, %Y %H:%M")
t4 <- strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
pollutantmean <- function(directory, pollutant, id = 1:332) {
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
data = numeric()
for(i in id){}
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
data = numeric()
for(i in id){ read <- read.csv(paste(directory, '/', formatC(i, width = 3, flag = '0', '.csv'), sep=''))}
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
## 'pollutant' is a character vector of length 1 indicating the name of the
## pollutant for which we will calculate the mean; either 'sulfate' or
## 'nitrate'.
## 'id' is an integer vector indicating the monitor ID numbers to be used
## Return the mean of the pollutant across all monitors list in the 'id'
## vector (ignoring NA values)
data = numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
data = c(data, newRead[[pollutant]])
}
return(mean(data, na.rm = TRUE))
}
pollutantmean("Users/nam/Downloads", "sulfate", 1:10)
pollutantmean("Users/nam/Downloads/specdata", "sulfate", 1:10)
pollutantmean("Users/nam/Downloads/specdata", "sulfate", 1:10)
getwd()
pollutantmean("Downloads/specdata", "sulfate", 1:10)
pollutantmean("Downloads/specdata", "nitrate", 70:72)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
## 'id' is an integer vector indicating the monitor ID numbers to be used
## Return a data frame of the form: id nobs 1 117 2 1041 ...  where 'id' is
## the monitor ID number and 'nobs' is the number of complete cases
nobs = numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
nobs = c(nobs, sum(complete.cases(newRead)))
}
return(data.frame(id, nobs))
}
cc <- complete("Downloads/specdata", c(6, 10, 20, 34, 100, 200, 310))
cc$nobs
cc <- complete("Downloads/specdata", 54)
cc$nobs
set.seed(42)
cc <- complete("Dơnloads/specdata", 332:1)
cc <- complete("Downloads/specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("Downloads/specdata")
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating the location of
## the CSV files
## 'threshold' is a numeric vector of length 1 indicating the number of
## completely observed observations (on all variables) required to compute
## the correlation between nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
df = complete(directory)
ids = df[df["nobs"] > threshold, ]$id
corrr = numeric()
for (i in ids) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"),
".csv", sep = ""))
dff = newRead[complete.cases(newRead), ]
corrr = c(corrr, cor(dff$sulfate, dff$nitrate))
}
return(corrr)
}
cr <- corr("Downloads/specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("Downloads/specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
cr <- corr("Downloads/specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- corr("Downloads/specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
library(swirl)
library("swirl")
install_course("R Programming")
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
lapply(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
class(cls_list)
sum(flags$orange)
?str
library("sưưirl")
library("swirl")
swirl()
ls()
class(plans)
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
str(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
sample()
sample(1)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:10, 10)
sample(1:10, 10, replace=FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0, 1), replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
flips <- sample(0 : 1, 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flipa)
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips)
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
my_pois = replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pói
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
cm
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x = cars$speed, y = cars$dist, x-axis = "Speed)
plot(x = cars$speed, y = cars$dist, x-axis = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col(=2))
plot(cars, col=2)
plot(cars, xlim=c(10, 15)))
plot(cars, xlim=c(10, 15))
plot(cars, pch=2)
data(mtcars)
?boxplot
boxplot(formala = mpg ~ cyl, data = mtcars)
boxplot(formula = mpg ~ cyl, data = mtcars)
str(mtcars)
hist(mtcars$mpg)
packageVersion("swirl")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
?read.csv
mydf <- read.csv(path2csv, stringsAsFactors = FALSE )
})
mydf <- read.csv(path2csv, stringsAsFactors = FALSE )
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-5:-20
-(5:20)
seletc(cran, -(X:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version = "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version < "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country , desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb =  size/ 2^20)
mutate(cran3, size_gb =  size_mb/ 2^10)
mutate(cran3, size_mb =  size/ 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size =  size + 1000)
summarize(cran, avg_bytes = mean(size))
getwd()
dir()
cd Data-science
setwd("Data-science")
getwd()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", hid.csv, method="curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "hid.csv", method="curl")
data <- read.csv("hid.csv")
data
head(data)
str(data)
?sum
sum(data$VAL == 24, !is.na(data$VAL))
sum(data, data$VAL == 24 & !is.na(data$VAL))
sum(data$VAL == 24 & !is.na(data$VAL))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "GAP.xlsx", method="curl")
swirl()
?read.csv
read.csv(path2csv)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, -(r_arch:country))
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,4,NA, 10))
is.na(c(3,5,NA, 10))
!is.na(c(3,5,NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran , ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/ 2^10)
mutate(cran3, size += 1000)
mutate(cran3, size = size + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(liblyr)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf"0)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
?summarize
summarize(by_package, mean(size))
?n
submit
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(by_package, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique()))
top_unique_sorted <- arrange(top_unique, desc(unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, - grade)
gather(students, sex, count)
gather(students, sex, count, -male)
student2
students2
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
students2
submit()
students3
?gather
submit()
?spread
submit()
submit()
library(readr)
parse_number("class5")
?mutate
submit
submit()
student4
students4
?select
submit()
?unite
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
submit()
submit()
?group_by
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package  =  "lubridate")
help(package  =  lubridate)
this_day = today()
this_day <- today()
this_day
this_day$year()
this_day.year()
year()
year(this_day)
month(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date = ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy("25081985")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
?now
now("America/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc + day(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
